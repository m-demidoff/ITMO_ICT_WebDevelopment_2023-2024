{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1 \u0442\u044b\u043a \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 2 \u0442\u044b\u043a \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1 \u0442\u044b\u043a \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 3 \u0442\u044b\u043a \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 4 \u0442\u044b\u043a","title":"\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435"},{"location":"#1","text":"\u0442\u044b\u043a","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1"},{"location":"#2","text":"\u0442\u044b\u043a","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 2"},{"location":"#31","text":"\u0442\u044b\u043a","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"#3","text":"\u0442\u044b\u043a","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 3"},{"location":"#4","text":"\u0442\u044b\u043a","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 4"},{"location":"lr1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u201cHello, server\u201d. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.') while True: # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data, address = server_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 message = data.decode('utf-8') # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', message) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 response = 'Hello, client' server_socket.sendto(response.encode('utf-8'), address) if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import socket def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0410\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_address = ('localhost', 12345) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 message = 'Hello, server' client_socket.sendto(message.encode('utf-8'), server_address) # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 data, address = client_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 response = data.decode('utf-8') # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:', response) if __name__ == '__main__': main() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u2013 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket import math def solve_quadratic_equation(a, b, c): # \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f discriminant = b**2 - 4*a*c if discriminant > 0: x1 = (-b + math.sqrt(discriminant)) / (2*a) x2 = (-b - math.sqrt(discriminant)) / (2*a) return '\u041a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: x1 = {:.2f}, x2 = {:.2f}'.format(x1, x2) elif discriminant == 0: x = -b / (2*a) return '\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: x = {:.2f}'.format(x) else: return '\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439' def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.') while True: # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data, address = server_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 params = data.decode('utf-8').split(',') # \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b a, b, c a = float(params[0]) b = float(params[1]) c = float(params[2]) # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f result = solve_quadratic_equation(a, b, c) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 server_socket.sendto(result.encode('utf-8'), address) if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import socket def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0410\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_address = ('localhost', 12345) # \u0412\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b a, b, c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b a = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 a: ')) b = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 b: ')) c = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 c: ')) # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \"a,b,c\" request = '{},{},{}'.format(a, b, c) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.sendto(request.encode('utf-8'), server_address) # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 data, address = client_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 result = data.decode('utf-8') # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 print('\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:', result) if __name__ == '__main__': main() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket def handle_request(client_socket): # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 index.html with open('index.html', 'r') as file: content = file.read() # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430 response = 'HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n' + content # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client_socket.sendall(response.encode()) # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f client_socket.close() def run_server(): # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 8000) server_socket.bind(server_address) # \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {}:{}'.format(*server_address)) while True: # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_socket, client_address = server_socket.accept() print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {}:{}'.format(*client_address)) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 handle_request(client_socket) if __name__ == '__main__': run_server() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0432\u0438\u0434\u0438\u043c: \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 import socket import threading def handle_client(client_socket, client_address): # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f\"\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 username = client_socket.recv(1024).decode() print(f\"{client_address} \u0432\u043e\u0448\u0435\u043b \u0432 \u0447\u0430\u0442 \u043a\u0430\u043a {username}\") while True: try: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 message = client_socket.recv(1024) if not message: break message = message.decode() print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {username}: {message}\") # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f for client in clients: if client != client_socket: client.sendall(message.encode()) except OSError: break client_socket.close() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 {client_address} \u0437\u0430\u043a\u0440\u044b\u0442\u043e\") def start_server(): host = 'localhost' port = 9999 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\") while True: client_socket, client_address = server_socket.accept() # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address)) client_thread.start() clients.append(client_socket) clients = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 start_server() \u041a\u043b\u0438\u0435\u043d\u0442 import socket import threading def receive_messages(client_socket): # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 while True: try: message = client_socket.recv(1024).decode() print(message) except OSError: break def send_message(client_socket, username): # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 while True: message = input() full_message = f\"{username}: {message}\" client_socket.send(full_message.encode()) def start_client(): host = 'localhost' port = 9999 username = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \") client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.send(username.encode()) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() send_thread = threading.Thread(target=send_message, args=(client_socket, username)) send_thread.start() start_client() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0417\u0430\u043f\u0443\u0441\u043a server.py \u0438 3 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 Web-server import socket import sys grades = {} # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port def serve_forever(self): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {self.host}:{self.port}\") while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e conn, client_address = serv_sock.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u0430\u0434\u0440\u0435\u0441\u043e\u043c: {client_address}\") try: self.serve_client(conn) except Exception as e: print('\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', e) finally: serv_sock.close() def serve_client(self, client): try: # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e req = self.parse_request(client) resp = self.handle_request(req) self.send_response(client, resp) except ConnectionResetError: client = None if client: client.close() def parse_request_line(self, rfile): # \u041f\u0430\u0440\u0441\u0438\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043c\u0435\u0442\u043e\u0434, \u0432\u0435\u0440\u0441\u0438\u044f) line = rfile.readline() line = line.decode('utf-8') return line.split() def parse_request(self, conn): # \u041f\u0430\u0440\u0441\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434, \u043f\u0443\u0442\u044c \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c) response_file = conn.makefile('rb') method, target, ver = self.parse_request_line(response_file) request = {'data': {}, 'method': method} if '?' in target: # \u0415\u0441\u043b\u0438 \u0432 \u043f\u0443\u0442\u0438 \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e POST-\u0437\u0430\u043f\u0440\u043e\u0441 request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c POST-\u0437\u0430\u043f\u0440\u043e\u0441 return self.handle_post(req) else: # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441 return self.handle_get() def handle_get(self): # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u0432\u0435\u0431-\u0444\u043e\u0440\u043c\u043e\u0439 \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0446\u0435\u043d\u043e\u043a content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form>' body += '<div><label for=\"discipline\">Discipline</label><br>' body += '<input type=\"text\" id=\"discipline\" name=\"discipline\"></div><br>' body += '<div><label for=\"grade\">Grade</label><br>' body += '<input type=\"text\" id=\"grade\" name=\"grade\"></div><br>' body += '<input type=\"submit\" value=\"Submit\"></form>' for subject in grades: # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 body += f'<div><span>{subject}: {grades[subject]}</span></div>' body += '</body></html>' body = body.encode('utf-8') headers = [ ('Content-Type', content_type), ('Content-Length', str(len(body))) ] return Response(200, 'OK', headers, body) def handle_post(self, request): # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c POST-\u0437\u0430\u043f\u0440\u043e\u0441. \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 (\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443) \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043e\u0446\u0435\u043d\u043e\u043a discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in grades: grades[discipline] = [] grades[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 response_file = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' response_file.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' response_file.write(header_line.encode('utf-8')) response_file.write(b'\\r\\n') if resp.body: response_file.write(resp.body) response_file.flush() response_file.close() class Response: def __init__(self, status, reason, headers=None, body=None): # \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Response, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430 self.status = status # \u0421\u0442\u0430\u0442\u0443\u0441 \u043e\u0442\u0432\u0435\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 200 - OK) self.reason = reason # \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043a \u0441\u0442\u0430\u0442\u0443\u0441\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"OK\") self.headers = headers # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 (\u0441\u043b\u043e\u0432\u0430\u0440\u044c) self.body = body # \u0422\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 (\u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043b\u0438 \u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435) if __name__ == '__main__': # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0431\u044b\u043b\u0438 \u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 if len(sys.argv) > 1: port = int(sys.argv[1]) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u0440\u0442 \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 else: port = 8000 # \u0415\u0441\u043b\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u043e\u0440\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (8000) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 MyHTTPServer, \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043a localhost \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0440\u0442 server = MyHTTPServer('localhost', port) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 server.serve_forever() \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432:","title":"\u041b/\u0420 \u21161"},{"location":"lr1/#no1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u201cHello, server\u201d. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#_1","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.') while True: # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data, address = server_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 message = data.decode('utf-8') # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', message) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 response = 'Hello, client' server_socket.sendto(response.encode('utf-8'), address) if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import socket def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0410\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_address = ('localhost', 12345) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 message = 'Hello, server' client_socket.sendto(message.encode('utf-8'), server_address) # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 data, address = client_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 response = data.decode('utf-8') # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:', response) if __name__ == '__main__': main()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lr1/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u0438","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"lr1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0433\u0440\u0443\u043f\u043f\u044b, \u2013 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket import math def solve_quadratic_equation(a, b, c): # \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f discriminant = b**2 - 4*a*c if discriminant > 0: x1 = (-b + math.sqrt(discriminant)) / (2*a) x2 = (-b - math.sqrt(discriminant)) / (2*a) return '\u041a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: x1 = {:.2f}, x2 = {:.2f}'.format(x1, x2) elif discriminant == 0: x = -b / (2*a) return '\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: x = {:.2f}'.format(x) else: return '\u0423\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439' def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 12345) server_socket.bind(server_address) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.') while True: # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data, address = server_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 params = data.decode('utf-8').split(',') # \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b a, b, c a = float(params[0]) b = float(params[1]) c = float(params[2]) # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f result = solve_quadratic_equation(a, b, c) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 server_socket.sendto(result.encode('utf-8'), address) if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import socket def main(): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0410\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_address = ('localhost', 12345) # \u0412\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b a, b, c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b a = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 a: ')) b = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 b: ')) c = float(input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 c: ')) # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \"a,b,c\" request = '{},{},{}'.format(a, b, c) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.sendto(request.encode('utf-8'), server_address) # \u0416\u0434\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 data, address = client_socket.recvfrom(1024) # \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 result = data.decode('utf-8') # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 print('\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:', result) if __name__ == '__main__': main()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lr1/#_4","text":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u0438","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"lr1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#_5","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket def handle_request(client_socket): # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 index.html with open('index.html', 'r') as file: content = file.read() # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430 response = 'HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n' + content # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client_socket.sendall(response.encode()) # \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f client_socket.close() def run_server(): # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u0430 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0441\u043e\u043a\u0435\u0442\u0430 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 8000) server_socket.bind(server_address) # \u041f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 server_socket.listen(1) print('\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {}:{}'.format(*server_address)) while True: # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_socket, client_address = server_socket.accept() print('\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {}:{}'.format(*client_address)) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 handle_request(client_socket) if __name__ == '__main__': run_server()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lr1/#_6","text":"\u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0432\u0438\u0434\u0438\u043c:","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"lr1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#_7","text":"\u0421\u0435\u0440\u0432\u0435\u0440 import socket import threading def handle_client(client_socket, client_address): # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f\"\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}\") # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 username = client_socket.recv(1024).decode() print(f\"{client_address} \u0432\u043e\u0448\u0435\u043b \u0432 \u0447\u0430\u0442 \u043a\u0430\u043a {username}\") while True: try: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 message = client_socket.recv(1024) if not message: break message = message.decode() print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {username}: {message}\") # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f for client in clients: if client != client_socket: client.sendall(message.encode()) except OSError: break client_socket.close() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 {client_address} \u0437\u0430\u043a\u0440\u044b\u0442\u043e\") def start_server(): host = 'localhost' port = 9999 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\") while True: client_socket, client_address = server_socket.accept() # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address)) client_thread.start() clients.append(client_socket) clients = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 start_server() \u041a\u043b\u0438\u0435\u043d\u0442 import socket import threading def receive_messages(client_socket): # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 while True: try: message = client_socket.recv(1024).decode() print(message) except OSError: break def send_message(client_socket, username): # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 while True: message = input() full_message = f\"{username}: {message}\" client_socket.send(full_message.encode()) def start_client(): host = 'localhost' port = 9999 username = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \") client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.send(username.encode()) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() send_thread = threading.Thread(target=send_message, args=(client_socket, username)) send_thread.start() start_client()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lr1/#_8","text":"\u0417\u0430\u043f\u0443\u0441\u043a server.py \u0438 3 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"lr1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lr1/#_9","text":"Web-server import socket import sys grades = {} # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port def serve_forever(self): # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {self.host}:{self.port}\") while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e conn, client_address = serv_sock.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u0430\u0434\u0440\u0435\u0441\u043e\u043c: {client_address}\") try: self.serve_client(conn) except Exception as e: print('\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:', e) finally: serv_sock.close() def serve_client(self, client): try: # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e req = self.parse_request(client) resp = self.handle_request(req) self.send_response(client, resp) except ConnectionResetError: client = None if client: client.close() def parse_request_line(self, rfile): # \u041f\u0430\u0440\u0441\u0438\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043c\u0435\u0442\u043e\u0434, \u0432\u0435\u0440\u0441\u0438\u044f) line = rfile.readline() line = line.decode('utf-8') return line.split() def parse_request(self, conn): # \u041f\u0430\u0440\u0441\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434, \u043f\u0443\u0442\u044c \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c) response_file = conn.makefile('rb') method, target, ver = self.parse_request_line(response_file) request = {'data': {}, 'method': method} if '?' in target: # \u0415\u0441\u043b\u0438 \u0432 \u043f\u0443\u0442\u0438 \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e POST-\u0437\u0430\u043f\u0440\u043e\u0441 request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c POST-\u0437\u0430\u043f\u0440\u043e\u0441 return self.handle_post(req) else: # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441 return self.handle_get() def handle_get(self): # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u0432\u0435\u0431-\u0444\u043e\u0440\u043c\u043e\u0439 \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0446\u0435\u043d\u043e\u043a content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form>' body += '<div><label for=\"discipline\">Discipline</label><br>' body += '<input type=\"text\" id=\"discipline\" name=\"discipline\"></div><br>' body += '<div><label for=\"grade\">Grade</label><br>' body += '<input type=\"text\" id=\"grade\" name=\"grade\"></div><br>' body += '<input type=\"submit\" value=\"Submit\"></form>' for subject in grades: # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 body += f'<div><span>{subject}: {grades[subject]}</span></div>' body += '</body></html>' body = body.encode('utf-8') headers = [ ('Content-Type', content_type), ('Content-Length', str(len(body))) ] return Response(200, 'OK', headers, body) def handle_post(self, request): # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c POST-\u0437\u0430\u043f\u0440\u043e\u0441. \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 (\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443) \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043e\u0446\u0435\u043d\u043e\u043a discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in grades: grades[discipline] = [] grades[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 response_file = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' response_file.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' response_file.write(header_line.encode('utf-8')) response_file.write(b'\\r\\n') if resp.body: response_file.write(resp.body) response_file.flush() response_file.close() class Response: def __init__(self, status, reason, headers=None, body=None): # \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Response, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u0430 self.status = status # \u0421\u0442\u0430\u0442\u0443\u0441 \u043e\u0442\u0432\u0435\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 200 - OK) self.reason = reason # \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043a \u0441\u0442\u0430\u0442\u0443\u0441\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"OK\") self.headers = headers # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 (\u0441\u043b\u043e\u0432\u0430\u0440\u044c) self.body = body # \u0422\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430 (\u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043b\u0438 \u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435) if __name__ == '__main__': # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0431\u044b\u043b\u0438 \u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 if len(sys.argv) > 1: port = int(sys.argv[1]) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u0440\u0442 \u0438\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 else: port = 8000 # \u0415\u0441\u043b\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u043e\u0440\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (8000) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 MyHTTPServer, \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043a localhost \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0440\u0442 server = MyHTTPServer('localhost', port) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 server.serve_forever()","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lr1/#_10","text":"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432:","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162. \u0422\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a. \u0422\u0430\u0431\u043b\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a: \u0424\u0418\u041e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043e\u043f\u044b\u0442 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043e\u043a \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0433\u043e\u043d\u0449\u0438\u043a\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0430\u0432\u0442\u043e\u0433\u043e\u043d\u043a\u0430\u043c. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0437\u0430\u0435\u0437\u0434\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435, \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u0433\u043e\u043d\u043a\u0430\u0445, \u0438\u043d\u043e\u0435), \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0435\u0437\u0434\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0433\u043e\u043d\u043a\u0438. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0431\u043b\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0433\u043e\u043d\u043e\u043a \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445, \u0433\u043e\u043d\u043a\u0430\u0445, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043e\u0442\u0437\u044b\u0432\u0430\u0445 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445. \u041a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439 UserRacer \u041f\u043e\u043b\u044f: first_name (CharField): \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). last_name (CharField): \u0424\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). patronymic (CharField, nullable): \u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). team (CharField, nullable): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). member_descr (TextField, nullable): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435). car_descr (TextField, nullable): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f (\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435). experience_years (IntegerField, nullable): \u041e\u043f\u044b\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u043e\u0434\u0430\u0445. user_class (CharField): \u041a\u043b\u0430\u0441\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: 'Non-pro', 'Experienced', 'Professional', 'Another'). username (CharField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). \u041c\u0435\u0442\u043e\u0434\u044b: str(): \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0418\u043c\u044f\". Race \u041f\u043e\u043b\u044f: num_race (AutoField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0433\u043e\u043d\u043a\u0438. name_race (CharField): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). date_race (DateTimeField, unique): \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0433\u043e\u043d\u043a\u0438. place_race (CharField): \u041c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0433\u043e\u043d\u043a\u0438 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). first_place (ForeignKey(UserRacer), nullable): \u041f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). second_place (ForeignKey(UserRacer), nullable): \u0412\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u0441\u0442\u043e (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). third_place (ForeignKey(UserRacer), nullable): \u0422\u0440\u0435\u0442\u044c\u0435 \u043c\u0435\u0441\u0442\u043e (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). \u041c\u0435\u0442\u043e\u0434\u044b: str(): \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"Race: \u043d\u043e\u043c\u0435\u0440_\u0433\u043e\u043d\u043a\u0438, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0433\u043e\u043d\u043a\u0438\". Registration \u041f\u043e\u043b\u044f: num_reg (AutoField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. num_race_reg (ForeignKey(Race)): \u041d\u043e\u043c\u0435\u0440 \u0433\u043e\u043d\u043a\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Race). num_user_reg (ForeignKey(UserRacer)): \u041d\u043e\u043c\u0435\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0433\u043e\u043d\u043a\u0443 (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). \u041c\u0435\u0442\u043e\u0434\u044b: str(): \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u043d\u043e\u043c\u0435\u0440_\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c: \u043d\u043e\u043c\u0435\u0440_\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\". Comment \u041f\u043e\u043b\u044f: id_review (AutoField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. num_race (ForeignKey(Race)): \u0413\u043e\u043d\u043a\u0430, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Race). time_race (DateTimeField): \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0433\u043e\u043d\u043a\u0438 (\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f). comment_time (DateTimeField): \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f). rate (IntegerField): \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 1 \u0434\u043e 10). username (ForeignKey(UserRacer)): \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043e\u0441\u0442\u0430\u0432\u0438\u0432\u0448\u0438\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). comment_type (CharField): \u0422\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: 'Question about race', 'Question about collaboration', 'Other'). text (TextField): \u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u041c\u0435\u0442\u043e\u0434\u044b: save( args, *kwargs): \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 time_race \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0433\u043e\u043d\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0412 \u0444\u0430\u0439\u043b\u0435 admin.py \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430. \u0412 \u0444\u0430\u0439\u043b\u0435 forms.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 MakeComment, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 Comment. \u0412 \u0444\u0430\u0439\u043b\u0435 views.py \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f (views) \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u0412 \u0444\u0430\u0439\u043b\u0435 urls.py \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b URL (URL patterns) \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 (views). \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Django \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: python manage.py runserver \u041a\u043e\u043c\u0430\u043d\u0434\u0430 runserver \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 Django \u0441 \u043f\u043e\u0440\u0442\u043e\u043c 8000.","title":"\u041b/\u0420 \u21162"},{"location":"lr2/#_1","text":"","title":"\u041a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"lr2/#userracer","text":"\u041f\u043e\u043b\u044f: first_name (CharField): \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). last_name (CharField): \u0424\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). patronymic (CharField, nullable): \u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). team (CharField, nullable): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 30 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). member_descr (TextField, nullable): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435). car_descr (TextField, nullable): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f (\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435). experience_years (IntegerField, nullable): \u041e\u043f\u044b\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u043e\u0434\u0430\u0445. user_class (CharField): \u041a\u043b\u0430\u0441\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: 'Non-pro', 'Experienced', 'Professional', 'Another'). username (CharField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). \u041c\u0435\u0442\u043e\u0434\u044b: str(): \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0418\u043c\u044f\".","title":"UserRacer"},{"location":"lr2/#race","text":"\u041f\u043e\u043b\u044f: num_race (AutoField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0433\u043e\u043d\u043a\u0438. name_race (CharField): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). date_race (DateTimeField, unique): \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0433\u043e\u043d\u043a\u0438. place_race (CharField): \u041c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0433\u043e\u043d\u043a\u0438 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 50 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). first_place (ForeignKey(UserRacer), nullable): \u041f\u0435\u0440\u0432\u043e\u0435 \u043c\u0435\u0441\u0442\u043e (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). second_place (ForeignKey(UserRacer), nullable): \u0412\u0442\u043e\u0440\u043e\u0435 \u043c\u0435\u0441\u0442\u043e (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). third_place (ForeignKey(UserRacer), nullable): \u0422\u0440\u0435\u0442\u044c\u0435 \u043c\u0435\u0441\u0442\u043e (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). \u041c\u0435\u0442\u043e\u0434\u044b: str(): \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u043d\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"Race: \u043d\u043e\u043c\u0435\u0440_\u0433\u043e\u043d\u043a\u0438, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0433\u043e\u043d\u043a\u0438\".","title":"Race"},{"location":"lr2/#registration","text":"\u041f\u043e\u043b\u044f: num_reg (AutoField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. num_race_reg (ForeignKey(Race)): \u041d\u043e\u043c\u0435\u0440 \u0433\u043e\u043d\u043a\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Race). num_user_reg (ForeignKey(UserRacer)): \u041d\u043e\u043c\u0435\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0433\u043e\u043d\u043a\u0443 (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). \u041c\u0435\u0442\u043e\u0434\u044b: str(): \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u043d\u043e\u043c\u0435\u0440_\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c: \u043d\u043e\u043c\u0435\u0440_\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\".","title":"Registration"},{"location":"lr2/#comment","text":"\u041f\u043e\u043b\u044f: id_review (AutoField, primary_key): \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. num_race (ForeignKey(Race)): \u0413\u043e\u043d\u043a\u0430, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Race). time_race (DateTimeField): \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0433\u043e\u043d\u043a\u0438 (\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f). comment_time (DateTimeField): \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f). rate (IntegerField): \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 1 \u0434\u043e 10). username (ForeignKey(UserRacer)): \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043e\u0441\u0442\u0430\u0432\u0438\u0432\u0448\u0438\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (\u0441\u0432\u044f\u0437\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e UserRacer). comment_type (CharField): \u0422\u0438\u043f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f (\u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: 'Question about race', 'Question about collaboration', 'Other'). text (TextField): \u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u041c\u0435\u0442\u043e\u0434\u044b: save( args, *kwargs): \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 time_race \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0433\u043e\u043d\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c.","title":"Comment"},{"location":"lr2/#_2","text":"\u0412 \u0444\u0430\u0439\u043b\u0435 admin.py \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430. \u0412 \u0444\u0430\u0439\u043b\u0435 forms.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 MakeComment, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 Comment. \u0412 \u0444\u0430\u0439\u043b\u0435 views.py \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f (views) \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446. \u0412 \u0444\u0430\u0439\u043b\u0435 urls.py \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b URL (URL patterns) \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 (views). \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Django \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: python manage.py runserver \u041a\u043e\u043c\u0430\u043d\u0434\u0430 runserver \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 Django \u0441 \u043f\u043e\u0440\u0442\u043e\u043c 8000.","title":"\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b"},{"location":"lr3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u21164 : \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0423 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043f\u043e\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u043b\u0430\u0441\u0441\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0422.\u043a. \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043b\u0430\u0442\u043d\u044b\u043c, \u0442\u043e \u0445\u043e\u0437\u044f\u0438\u043d \u043e\u0431\u044f\u0437\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0441\u0447\u0435\u0442 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430, \u0441\u043d\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0441 \u0441\u0443\u0434\u0435\u0439\u0441\u0442\u0432\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c, \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043e\u0431\u0430\u043a\u0443 \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435). Views.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from rest_framework import generics from rest_framework.permissions import IsAuthenticated, AllowAny from .models import Organizer, Participant, Show, Participation, Expert, Club, Ring from .serializers import * class OrganizerListCreateView(generics.ListCreateAPIView): queryset = Organizer.objects.all() serializer_class = OrganizerSerializer permission_classes = [IsAuthenticated] class OrganizerDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Organizer.objects.all() serializer_class = OrganizerSerializer permission_classes = [IsAuthenticated] class ParticipantListCreateView(generics.ListCreateAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer permission_classes = [IsAuthenticated] class ParticipantDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer permission_classes = [IsAuthenticated] class ShowListCreateView(generics.ListCreateAPIView): queryset = Show.objects.all() serializer_class = ShowSerializer permission_classes = [IsAuthenticated] class ShowDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Show.objects.all() serializer_class = ShowSerializer permission_classes = [IsAuthenticated] class ParticipationListCreateView(generics.ListCreateAPIView): queryset = Participation.objects.all() serializer_class = ParticipationSerializer permission_classes = [IsAuthenticated] class ParticipationDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Participation.objects.all() serializer_class = ParticipationSerializer permission_classes = [IsAuthenticated] class ExpertListCreateView(generics.ListCreateAPIView): queryset = Expert.objects.all() serializer_class = ExpertSerializer permission_classes = [IsAuthenticated] class ExpertDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Expert.objects.all() serializer_class = ExpertSerializer permission_classes = [IsAuthenticated] class ClubListCreateView(generics.ListCreateAPIView): queryset = Club.objects.all() serializer_class = ClubSerializer permission_classes = [IsAuthenticated] class ClubDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Club.objects.all() serializer_class = ClubSerializer permission_classes = [IsAuthenticated] class RingListCreateView(generics.ListCreateAPIView): queryset = Ring.objects.all() serializer_class = RingSerializer permission_classes = [IsAuthenticated] class RingDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Ring.objects.all() serializer_class = RingSerializer permission_classes = [IsAuthenticated] Models.py \u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a.\" \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from django.db import models from django.contrib.auth.models import User class Organizer(User): phone = models.CharField(verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430', max_length=15, null=True, blank=True) desc = models.CharField(verbose_name='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f', max_length=100, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'phone'] class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'husky'), ('l', 'labrador'), ('r', 'retriever'), ('p', 'pudel'), ('o', 'other'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family_info = models.CharField(max_length=1000) owner_info = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True) vaccinated = models.DateField() class Show(models.Model): date = models.DateField() show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed'), ('mixed', 'mixed-type') ) type = models.CharField(max_length=5, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('gold', 'gold'), ('silver', 'silver'), ('bronze', 'bronze'), ('none', 'none'), ) medal = models.CharField(max_length=6, choices=medal_types, null=True, blank=True) rings = models.ManyToManyField('Ring', null=True, blank=True) dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) registration_fee = models.IntegerField(blank=True, null=True) class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True ) Urls.py \u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0441 \u0441\u0430\u0439\u0442\u043e\u043c. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from django.urls import path from .views import ( OrganizerListCreateView, OrganizerDetailView, ParticipantListCreateView, ParticipantDetailView, ShowListCreateView, ShowDetailView, ParticipationListCreateView, ParticipationDetailView, ExpertListCreateView, ExpertDetailView, ClubListCreateView, ClubDetailView, RingListCreateView, RingDetailView, ) urlpatterns = [ path('organizers/', OrganizerListCreateView.as_view(), name='organizer-list-create'), path('organizers/<int:pk>/', OrganizerDetailView.as_view(), name='organizer-detail'), path('participants/', ParticipantListCreateView.as_view(), name='participant-list-create'), path('participants/<int:pk>/', ParticipantDetailView.as_view(), name='participant-detail'), path('shows/', ShowListCreateView.as_view(), name='show-list-create'), path('shows/<int:pk>/', ShowDetailView.as_view(), name='show-detail'), path('participations/', ParticipationListCreateView.as_view(), name='participation-list-create'), path('participations/<int:pk>/', ParticipationDetailView.as_view(), name='participation-detail'), path('experts/', ExpertListCreateView.as_view(), name='expert-list-create'), path('experts/<int:pk>/', ExpertDetailView.as_view(), name='expert-detail'), path('clubs/', ClubListCreateView.as_view(), name='club-list-create'), path('clubs/<int:pk>/', ClubDetailView.as_view(), name='club-detail'), path('rings/', RingListCreateView.as_view(), name='ring-list-create'), path('rings/<int:pk>/', RingDetailView.as_view(), name='ring-detail'), ] Serializers.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class OrganizerSerializer(serializers.ModelSerializer): class Meta: model = Organizer fields = \"__all__\" class ShowSerializer(serializers.ModelSerializer): class Meta: model = Show fields = \"__all__\" class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class ClubSerializer(serializers.ModelSerializer): class Meta: model = Club fields = \"__all__\"","title":"\u041b/\u0420 \u21163"},{"location":"lr3/#_1","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u21164 : \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0441\u043e\u0431\u0430\u043a. \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u043e\u043d\u043e- \u0438 \u043f\u043e\u043b\u0438\u043f\u043e\u0440\u043e\u0434\u043d\u044b\u0435. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0441\u043e\u0431\u0430\u043a\u0430\u0445 - \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430\u0445. \u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043b\u0438 \u043e\u0442 \u043a\u043b\u0443\u0431\u0430. \u0423 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043f\u043e\u043d\u0441\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043f\u043e\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e \u0442\u043e\u043c, \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0443\u0431\u0443 \u043e\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f, \u043a\u043b\u0438\u0447\u043a\u0430, \u043f\u043e\u0440\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043a\u043b\u0430\u0441\u0441\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u043e\u0434\u043e\u0441\u043b\u043e\u0432\u043d\u043e\u0439 (\u043d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043a\u043b\u0438\u0447\u043a\u0438 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439), \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u0438\u0432\u0438\u0432\u043a\u0438, \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u043e\u0437\u044f\u0438\u043d\u0430. \u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043e\u0431\u0430\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0422.\u043a. \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043b\u0430\u0442\u043d\u044b\u043c, \u0442\u043e \u0445\u043e\u0437\u044f\u0438\u043d \u043e\u0431\u044f\u0437\u0430\u043d \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0441\u0447\u0435\u0442 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c. \u0421\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u043e\u0448\u043b\u0430 \u043c\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e\u0431 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0438\u043c\u044f, \u043d\u043e\u043c\u0435\u0440 \u0440\u0438\u043d\u0433\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442, \u043a\u043b\u0443\u0431, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043e\u0441\u0442\u043e\u0438\u0442. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0438\u043d\u0433 \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u0440\u0438\u043d\u0433\u0435, \u043d\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u0440\u0438\u043d\u0433\u0435 \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0434\u044b. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c 3 \u0443\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u044f, \u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b\u044b \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430. \u0418\u0442\u043e\u0433\u043e\u043c \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435 \u043f\u043e \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430, \u0441\u043d\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0430 \u0441 \u0441\u0443\u0434\u0435\u0439\u0441\u0442\u0432\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0435\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u043c, \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043e\u0431\u0430\u043a\u0443 \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0440\u0438\u043d\u0433\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0445\u043e\u0437\u044f\u0438\u043d \u0441\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u043e\u0431\u0430\u043a\u043e\u0439? \u041a\u0430\u043a\u0438\u043c\u0438 \u043f\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0443\u0431? \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0431\u044b\u043b\u0438 \u043e\u0442\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u043e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435? \u041a\u0430\u043a\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0440\u043e\u0434\u0443? \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435? \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0434\u0430\u0447\u0438 \u043e\u0442\u0447\u0435\u0442\u0430 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 (\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0434\u0430\u043b\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u0435).","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lr3/#viewspy","text":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from rest_framework import generics from rest_framework.permissions import IsAuthenticated, AllowAny from .models import Organizer, Participant, Show, Participation, Expert, Club, Ring from .serializers import * class OrganizerListCreateView(generics.ListCreateAPIView): queryset = Organizer.objects.all() serializer_class = OrganizerSerializer permission_classes = [IsAuthenticated] class OrganizerDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Organizer.objects.all() serializer_class = OrganizerSerializer permission_classes = [IsAuthenticated] class ParticipantListCreateView(generics.ListCreateAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer permission_classes = [IsAuthenticated] class ParticipantDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Participant.objects.all() serializer_class = ParticipantSerializer permission_classes = [IsAuthenticated] class ShowListCreateView(generics.ListCreateAPIView): queryset = Show.objects.all() serializer_class = ShowSerializer permission_classes = [IsAuthenticated] class ShowDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Show.objects.all() serializer_class = ShowSerializer permission_classes = [IsAuthenticated] class ParticipationListCreateView(generics.ListCreateAPIView): queryset = Participation.objects.all() serializer_class = ParticipationSerializer permission_classes = [IsAuthenticated] class ParticipationDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Participation.objects.all() serializer_class = ParticipationSerializer permission_classes = [IsAuthenticated] class ExpertListCreateView(generics.ListCreateAPIView): queryset = Expert.objects.all() serializer_class = ExpertSerializer permission_classes = [IsAuthenticated] class ExpertDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Expert.objects.all() serializer_class = ExpertSerializer permission_classes = [IsAuthenticated] class ClubListCreateView(generics.ListCreateAPIView): queryset = Club.objects.all() serializer_class = ClubSerializer permission_classes = [IsAuthenticated] class ClubDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Club.objects.all() serializer_class = ClubSerializer permission_classes = [IsAuthenticated] class RingListCreateView(generics.ListCreateAPIView): queryset = Ring.objects.all() serializer_class = RingSerializer permission_classes = [IsAuthenticated] class RingDetailView(generics.RetrieveUpdateDestroyAPIView): queryset = Ring.objects.all() serializer_class = RingSerializer permission_classes = [IsAuthenticated]","title":"Views.py"},{"location":"lr3/#modelspy","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \"\u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a.\" \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from django.db import models from django.contrib.auth.models import User class Organizer(User): phone = models.CharField(verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430', max_length=15, null=True, blank=True) desc = models.CharField(verbose_name='\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f', max_length=100, null=True, blank=True) REQUIRED_FIELDS = ['first_name', 'last_name', 'phone'] class Participant(models.Model): name = models.CharField(max_length=100) breed_types = ( ('h', 'husky'), ('l', 'labrador'), ('r', 'retriever'), ('p', 'pudel'), ('o', 'other'), ) breed = models.CharField(max_length=1, choices=breed_types) age = models.IntegerField() family_info = models.CharField(max_length=1000) owner_info = models.CharField(max_length=1000) club = models.ForeignKey('Club', on_delete=models.CASCADE, null=True, blank=True) vaccinated = models.DateField() class Show(models.Model): date = models.DateField() show_types = ( ('mono', 'mono-breed'), ('poly', 'poly-breed'), ('mixed', 'mixed-type') ) type = models.CharField(max_length=5, choices=show_types) participants = models.ManyToManyField('Participant', # through='Participation', related_name='show_participants' ) class Participation(models.Model): participant = models.ForeignKey('Participant', on_delete=models.CASCADE) medal_types = ( ('gold', 'gold'), ('silver', 'silver'), ('bronze', 'bronze'), ('none', 'none'), ) medal = models.CharField(max_length=6, choices=medal_types, null=True, blank=True) rings = models.ManyToManyField('Ring', null=True, blank=True) dismissed = models.BooleanField() final_grade = models.IntegerField(blank=True, null=True) registration_fee = models.IntegerField(blank=True, null=True) class Expert(models.Model): name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) club = models.CharField(max_length=100) class Club(models.Model): name = models.CharField(max_length=100) members = models.ManyToManyField('Participant', related_name='club_members' ) class Ring(models.Model): show = models.ForeignKey('Show', on_delete=models.CASCADE) experts = models.ManyToManyField('Expert', # through='Grade' related_name='ring_experts', null=True, blank=True )","title":"Models.py"},{"location":"lr3/#urlspy","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0441 \u0441\u0430\u0439\u0442\u043e\u043c. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from django.urls import path from .views import ( OrganizerListCreateView, OrganizerDetailView, ParticipantListCreateView, ParticipantDetailView, ShowListCreateView, ShowDetailView, ParticipationListCreateView, ParticipationDetailView, ExpertListCreateView, ExpertDetailView, ClubListCreateView, ClubDetailView, RingListCreateView, RingDetailView, ) urlpatterns = [ path('organizers/', OrganizerListCreateView.as_view(), name='organizer-list-create'), path('organizers/<int:pk>/', OrganizerDetailView.as_view(), name='organizer-detail'), path('participants/', ParticipantListCreateView.as_view(), name='participant-list-create'), path('participants/<int:pk>/', ParticipantDetailView.as_view(), name='participant-detail'), path('shows/', ShowListCreateView.as_view(), name='show-list-create'), path('shows/<int:pk>/', ShowDetailView.as_view(), name='show-detail'), path('participations/', ParticipationListCreateView.as_view(), name='participation-list-create'), path('participations/<int:pk>/', ParticipationDetailView.as_view(), name='participation-detail'), path('experts/', ExpertListCreateView.as_view(), name='expert-list-create'), path('experts/<int:pk>/', ExpertDetailView.as_view(), name='expert-detail'), path('clubs/', ClubListCreateView.as_view(), name='club-list-create'), path('clubs/<int:pk>/', ClubDetailView.as_view(), name='club-detail'), path('rings/', RingListCreateView.as_view(), name='ring-list-create'), path('rings/<int:pk>/', RingDetailView.as_view(), name='ring-detail'), ]","title":"Urls.py"},{"location":"lr3/#serializerspy","text":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from rest_framework import serializers from .models import * class ExpertSerializer(serializers.ModelSerializer): class Meta: model = Expert fields = \"__all__\" class ParticipationSerializer(serializers.ModelSerializer): class Meta: model = Participation fields = \"__all__\" class ParticipantSerializer(serializers.ModelSerializer): class Meta: model = Participant fields = \"__all__\" class OrganizerSerializer(serializers.ModelSerializer): class Meta: model = Organizer fields = \"__all__\" class ShowSerializer(serializers.ModelSerializer): class Meta: model = Show fields = \"__all__\" class RingSerializer(serializers.ModelSerializer): class Meta: model = Ring fields = \"__all__\" class ClubSerializer(serializers.ModelSerializer): class Meta: model = Club fields = \"__all__\"","title":"Serializers.py"},{"location":"lr4/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js. \u041f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c : \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a. \u041f\u0443\u0442\u0438 (router/index.js) \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u0430. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : import { createRouter, createWebHistory } from 'vue-router' import MainPage from \"@/components/MainPage.vue\"; import ParticipantList from \"@/components/ParticipantList.vue\"; import ParticipantDetails from \"@/components/ParticipantDetails.vue\"; import ParticipantEdit from \"@/components/ParticipantEdit.vue\"; import ParticipantCreate from \"@/components/ParticipantCreate.vue\"; import ExpertList from \"@/components/ExpertList.vue\"; import ExpertDetails from \"@/components/ExpertDetails.vue\"; import ExpertEdit from \"@/components/ExpertEdit.vue\"; import ExpertCreate from \"@/components/ExpertCreate.vue\"; import ClubList from \"@/components/ClubList.vue\"; import ClubDetails from \"@/components/ClubDetails.vue\"; import ClubEdit from \"@/components/ClubEdit.vue\"; import ClubCreate from \"@/components/ClubCreate.vue\"; import RingList from \"@/components/RingList.vue\"; import RingDetails from \"@/components/RingDetails.vue\"; import RingEdit from \"@/components/RingEdit.vue\"; import RingCreate from \"@/components/RingCreate.vue\"; import ShowList from \"@/components/ShowList.vue\"; import ShowDetails from \"@/components/ShowDetails.vue\"; import ShowEdit from \"@/components/ShowEdit.vue\"; import ShowCreate from \"@/components/ShowCreate.vue\"; import ParticipationList from \"@/components/ParticipationList.vue\"; import ParticipationDetails from \"@/components/ParticipationDetails.vue\"; import ParticipationEdit from \"@/components/ParticipationEdit.vue\"; import ParticipationCreate from \"@/components/ParticipationCreate.vue\"; import Auth from \"@/components/Auth.vue\"; //import ErrorPage from \"@/components/ErrorPage.vue\"; import Registration from \"@/components/Registration.vue\"; import UserProfile from \"@/components/UserProfile.vue\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '', name: 'Auth', component: Auth }, { path: '/mainpage', name: 'MainPage', component: MainPage }, { path: '/registration', name: 'Registration', component: Registration }, { path: '/userprofile', name: 'UserProfile', component: UserProfile }, { path: '/participants', name: 'ParticipantList', component: ParticipantList }, { path: '/participants/:id', name: 'ParticipantDetails', component: ParticipantDetails }, { path: '/participants/:id/edit', name: 'ParticipantEdit', component: ParticipantEdit, props: (route) => ({ participant: route.params.participant }) }, { path: '/participants/add', name: 'ParticipantCreate', component: ParticipantCreate }, { path: '/experts', name: 'ExpertList', component: ExpertList }, { path: '/experts/:id', name: 'ExpertDetails', component: ExpertDetails }, { path: '/experts/:id/edit', name: 'ExpertEdit', component: ExpertEdit, props: (route) => ({ expert: route.params.expert }) }, { path: '/experts/add', name: 'ExpertCreate', component: ExpertCreate }, { path: '/clubs', name: 'ClubList', component: ClubList }, { path: '/clubs/:id', name: 'ClubDetails', component: ClubDetails }, { path: '/clubs/:id/edit', name: 'ClubEdit', component: ClubEdit, props: (route) => ({ club: route.params.club }) }, { path: '/clubs/add', name: 'ClubCreate', component: ClubCreate }, { path: '/rings', name: 'RingList', component: RingList }, { path: '/rings/:id', name: 'RingDetails', component: RingDetails }, { path: '/rings/:id/edit', name: 'RingEdit', component: RingEdit, props: (route) => ({ ring: route.params.ring }) }, { path: '/rings/add', name: 'RingCreate', component: RingCreate }, { path: '/shows', name: 'ShowList', component: ShowList }, { path: '/shows/:id', name: 'ShowDetails', component: ShowDetails }, { path: '/shows/:id/edit', name: 'ShowEdit', component: ShowEdit, props: (route) => ({ show: route.params.show }) }, { path: '/shows/add', name: 'ShowCreate', component: ShowCreate }, { path: '/participations', name: 'ParticipationList', component: ParticipationList }, { path: '/participations/:id', name: 'ParticipationDetails', component: ParticipationDetails }, { path: '/participations/:id/edit', name: 'ParticipationEdit', component: ParticipationEdit, props: (route) => ({ participation: route.params.participation }) }, { path: '/participations/add', name: 'ParticipationCreate', component: ParticipationCreate }, // \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b ] }) export default router \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0418\u0445 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435. Auth.vue : <template> <div class=\"login-container\"> <h2>Login</h2> <form @submit.prevent=\"setLogin\"> <label for=\"username\">Username:</label> <input v-model=\"login\" type=\"text\" id=\"username\" required /> <label for=\"password\">Password:</label> <input v-model=\"password\" type=\"password\" id=\"password\" required /> <button type=\"submit\">Login</button> </form> <router-link to=\"/registration\" class=\"register-button\"> Register </router-link> </div> </template> <script> import axios from 'axios'; export default { name: 'Auth', data() { return { login: '', password: '', }; }, methods: { async setLogin() { try { const response = await axios.post( 'http://127.0.0.1:8000/auth/token/login/', { username: this.login, password: this.password, }, { headers: { 'Content-Type': 'application/json', Accept: 'application/json', }, } ); localStorage.setItem('access_token', response.data.access); this.$router.push({ name: 'UserProfile' }); } catch (error) { console.error(error); if (error.response && error.response.status === 401) { this.$router.push({ name: 'ErrorPage' }); } } }, }, }; </script> <style scoped> .login-container { width: 400%; max-width: 400px; margin: 0 auto; text-align: center; padding: 20px; border: 1px solid #ccc; border-radius: 5px; } .login-container h2 { margin-bottom: 20px; } form { display: flex; flex-direction: column; } label { margin-bottom: 5px; } input { margin-bottom: 15px; padding: 10px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 5px; } button, .register-button { background-color: transparent; color: #333; border: 2px solid #3498db; padding: 15px 20px; border-radius: 30px; cursor: pointer; transition: background-color 0.3s, color 0.3s; display: block; margin-bottom: 15px; width: 100%; } button:hover, .register-button:hover { background-color: #3498db; color: #fff; } </style> UserProfile.vue : <template> <div> <h1>User Information</h1> <div v-if=\"user\"> <p><strong>Email:</strong> {{ user.email }}</p> <p><strong>ID:</strong> {{ user.id }}</p> <p><strong>Username:</strong> {{ user.username }}</p> </div> <div v-else> <p>Loading...</p> </div> <!-- \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 --> <router-link to=\"/MainPage\" class=\"back-button\"> Back to Main Page </router-link> </div> </template> <script> import axios from 'axios'; export default { data() { return { user: null, }; }, mounted() { // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 const accessToken = localStorage.getItem('access_token'); if (!accessToken) { // \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 this.$router.push({ name: 'Auth' }); return; } // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 axios.get('http://127.0.0.1:8000/auth/users/me', { headers: { Authorization: `Token ${accessToken}`, }, }) .then(response => { this.user = response.data; }) .catch(error => { console.error('Error fetching user information:', error); }); }, }; </script> <style scoped> /* \u0422\u0432\u043e\u0438 \u0441\u0442\u0438\u043b\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b */ </style> MainPage.vue : <template> <div class=\"main-page\"> <h1 class=\"main-title\">\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430</h1> <router-link :to=\"{ name: 'ParticipantList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'ShowList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a</button> </router-link> <router-link :to=\"{ name: 'ParticipationList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0443\u0447\u0430\u0441\u0442\u0438\u0439</button> </router-link> <router-link :to=\"{ name: 'ExpertList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'ClubList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u043a\u043b\u0443\u0431\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'RingList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0440\u0438\u043d\u0433\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'Auth' }\"> <button class=\"main-button\">\u0412\u044b\u0439\u0442\u0438</button> </router-link> </div> </template> <script> export default { // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b }; </script> <style scoped> .main-page { text-align: center; padding: 20px; display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; } .main-title { font-size: 24px; margin-bottom: 20px; color: #333; } .main-button { padding: 15px 20px; margin-bottom: 10px; font-size: 20px; border-radius: 30px; background-color: transparent; text-decoration: none; cursor: pointer; color: #333; transition: background-color 0.3s; margin: 10; border: 1px solid #3498db; width: 400px; /* \u0424\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0448\u0438\u0440\u0438\u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0438 */ } .main-button:hover { background-color: #3498db; color: #fff; } </style>","title":"\u041b/\u0420 \u21164"},{"location":"lr4/#_1","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js. \u041f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c : \u0412\u044b\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u043e\u0431\u0430\u043a.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lr4/#routerindexjs","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u0430. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : import { createRouter, createWebHistory } from 'vue-router' import MainPage from \"@/components/MainPage.vue\"; import ParticipantList from \"@/components/ParticipantList.vue\"; import ParticipantDetails from \"@/components/ParticipantDetails.vue\"; import ParticipantEdit from \"@/components/ParticipantEdit.vue\"; import ParticipantCreate from \"@/components/ParticipantCreate.vue\"; import ExpertList from \"@/components/ExpertList.vue\"; import ExpertDetails from \"@/components/ExpertDetails.vue\"; import ExpertEdit from \"@/components/ExpertEdit.vue\"; import ExpertCreate from \"@/components/ExpertCreate.vue\"; import ClubList from \"@/components/ClubList.vue\"; import ClubDetails from \"@/components/ClubDetails.vue\"; import ClubEdit from \"@/components/ClubEdit.vue\"; import ClubCreate from \"@/components/ClubCreate.vue\"; import RingList from \"@/components/RingList.vue\"; import RingDetails from \"@/components/RingDetails.vue\"; import RingEdit from \"@/components/RingEdit.vue\"; import RingCreate from \"@/components/RingCreate.vue\"; import ShowList from \"@/components/ShowList.vue\"; import ShowDetails from \"@/components/ShowDetails.vue\"; import ShowEdit from \"@/components/ShowEdit.vue\"; import ShowCreate from \"@/components/ShowCreate.vue\"; import ParticipationList from \"@/components/ParticipationList.vue\"; import ParticipationDetails from \"@/components/ParticipationDetails.vue\"; import ParticipationEdit from \"@/components/ParticipationEdit.vue\"; import ParticipationCreate from \"@/components/ParticipationCreate.vue\"; import Auth from \"@/components/Auth.vue\"; //import ErrorPage from \"@/components/ErrorPage.vue\"; import Registration from \"@/components/Registration.vue\"; import UserProfile from \"@/components/UserProfile.vue\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '', name: 'Auth', component: Auth }, { path: '/mainpage', name: 'MainPage', component: MainPage }, { path: '/registration', name: 'Registration', component: Registration }, { path: '/userprofile', name: 'UserProfile', component: UserProfile }, { path: '/participants', name: 'ParticipantList', component: ParticipantList }, { path: '/participants/:id', name: 'ParticipantDetails', component: ParticipantDetails }, { path: '/participants/:id/edit', name: 'ParticipantEdit', component: ParticipantEdit, props: (route) => ({ participant: route.params.participant }) }, { path: '/participants/add', name: 'ParticipantCreate', component: ParticipantCreate }, { path: '/experts', name: 'ExpertList', component: ExpertList }, { path: '/experts/:id', name: 'ExpertDetails', component: ExpertDetails }, { path: '/experts/:id/edit', name: 'ExpertEdit', component: ExpertEdit, props: (route) => ({ expert: route.params.expert }) }, { path: '/experts/add', name: 'ExpertCreate', component: ExpertCreate }, { path: '/clubs', name: 'ClubList', component: ClubList }, { path: '/clubs/:id', name: 'ClubDetails', component: ClubDetails }, { path: '/clubs/:id/edit', name: 'ClubEdit', component: ClubEdit, props: (route) => ({ club: route.params.club }) }, { path: '/clubs/add', name: 'ClubCreate', component: ClubCreate }, { path: '/rings', name: 'RingList', component: RingList }, { path: '/rings/:id', name: 'RingDetails', component: RingDetails }, { path: '/rings/:id/edit', name: 'RingEdit', component: RingEdit, props: (route) => ({ ring: route.params.ring }) }, { path: '/rings/add', name: 'RingCreate', component: RingCreate }, { path: '/shows', name: 'ShowList', component: ShowList }, { path: '/shows/:id', name: 'ShowDetails', component: ShowDetails }, { path: '/shows/:id/edit', name: 'ShowEdit', component: ShowEdit, props: (route) => ({ show: route.params.show }) }, { path: '/shows/add', name: 'ShowCreate', component: ShowCreate }, { path: '/participations', name: 'ParticipationList', component: ParticipationList }, { path: '/participations/:id', name: 'ParticipationDetails', component: ParticipationDetails }, { path: '/participations/:id/edit', name: 'ParticipationEdit', component: ParticipationEdit, props: (route) => ({ participation: route.params.participation }) }, { path: '/participations/add', name: 'ParticipationCreate', component: ParticipationCreate }, // \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b ] }) export default router","title":"\u041f\u0443\u0442\u0438 (router/index.js)"},{"location":"lr4/#_2","text":"\u0418\u0445 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435. Auth.vue : <template> <div class=\"login-container\"> <h2>Login</h2> <form @submit.prevent=\"setLogin\"> <label for=\"username\">Username:</label> <input v-model=\"login\" type=\"text\" id=\"username\" required /> <label for=\"password\">Password:</label> <input v-model=\"password\" type=\"password\" id=\"password\" required /> <button type=\"submit\">Login</button> </form> <router-link to=\"/registration\" class=\"register-button\"> Register </router-link> </div> </template> <script> import axios from 'axios'; export default { name: 'Auth', data() { return { login: '', password: '', }; }, methods: { async setLogin() { try { const response = await axios.post( 'http://127.0.0.1:8000/auth/token/login/', { username: this.login, password: this.password, }, { headers: { 'Content-Type': 'application/json', Accept: 'application/json', }, } ); localStorage.setItem('access_token', response.data.access); this.$router.push({ name: 'UserProfile' }); } catch (error) { console.error(error); if (error.response && error.response.status === 401) { this.$router.push({ name: 'ErrorPage' }); } } }, }, }; </script> <style scoped> .login-container { width: 400%; max-width: 400px; margin: 0 auto; text-align: center; padding: 20px; border: 1px solid #ccc; border-radius: 5px; } .login-container h2 { margin-bottom: 20px; } form { display: flex; flex-direction: column; } label { margin-bottom: 5px; } input { margin-bottom: 15px; padding: 10px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 5px; } button, .register-button { background-color: transparent; color: #333; border: 2px solid #3498db; padding: 15px 20px; border-radius: 30px; cursor: pointer; transition: background-color 0.3s, color 0.3s; display: block; margin-bottom: 15px; width: 100%; } button:hover, .register-button:hover { background-color: #3498db; color: #fff; } </style> UserProfile.vue : <template> <div> <h1>User Information</h1> <div v-if=\"user\"> <p><strong>Email:</strong> {{ user.email }}</p> <p><strong>ID:</strong> {{ user.id }}</p> <p><strong>Username:</strong> {{ user.username }}</p> </div> <div v-else> <p>Loading...</p> </div> <!-- \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043d\u043e\u043f\u043a\u0443 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 --> <router-link to=\"/MainPage\" class=\"back-button\"> Back to Main Page </router-link> </div> </template> <script> import axios from 'axios'; export default { data() { return { user: null, }; }, mounted() { // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 const accessToken = localStorage.getItem('access_token'); if (!accessToken) { // \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 this.$router.push({ name: 'Auth' }); return; } // \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 axios.get('http://127.0.0.1:8000/auth/users/me', { headers: { Authorization: `Token ${accessToken}`, }, }) .then(response => { this.user = response.data; }) .catch(error => { console.error('Error fetching user information:', error); }); }, }; </script> <style scoped> /* \u0422\u0432\u043e\u0438 \u0441\u0442\u0438\u043b\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b */ </style> MainPage.vue : <template> <div class=\"main-page\"> <h1 class=\"main-title\">\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430</h1> <router-link :to=\"{ name: 'ParticipantList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'ShowList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0432\u044b\u0441\u0442\u0430\u0432\u043e\u043a</button> </router-link> <router-link :to=\"{ name: 'ParticipationList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0443\u0447\u0430\u0441\u0442\u0438\u0439</button> </router-link> <router-link :to=\"{ name: 'ExpertList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'ClubList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u043a\u043b\u0443\u0431\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'RingList' }\"> <button class=\"main-button\">\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0440\u0438\u043d\u0433\u043e\u0432</button> </router-link> <router-link :to=\"{ name: 'Auth' }\"> <button class=\"main-button\">\u0412\u044b\u0439\u0442\u0438</button> </router-link> </div> </template> <script> export default { // \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b }; </script> <style scoped> .main-page { text-align: center; padding: 20px; display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; } .main-title { font-size: 24px; margin-bottom: 20px; color: #333; } .main-button { padding: 15px 20px; margin-bottom: 10px; font-size: 20px; border-radius: 30px; background-color: transparent; text-decoration: none; cursor: pointer; color: #333; transition: background-color 0.3s; margin: 10; border: 1px solid #3498db; width: 400px; /* \u0424\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0448\u0438\u0440\u0438\u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0438 */ } .main-button:hover { background-color: #3498db; color: #fff; } </style>","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b"},{"location":"practice_3_1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1 \u041c\u043e\u0434\u0435\u043b\u0438 from django.db import models class Owner(models.Model): name = models.CharField(max_length=100) surname = models.CharField(max_length=100) birthday = models.DateField() class License(models.Model): name = models.CharField(max_length=100) owner = models.ForeignKey(Owner, related_name='licences', on_delete=models.CASCADE) license_type = models.CharField(max_length=100) date_given = models.DateField() class Car(models.Model): num = models.CharField(max_length=100) mark = models.CharField(max_length=100) model = models.CharField(max_length=100) color = models.CharField(max_length=100) class CarOwning(models.Model): start = models.DateField() finish = models.DateField() car = models.ForeignKey(Car, related_name='owners', on_delete=models.CASCADE) owner = models.ForeignKey(Owner, related_name='cars', on_delete=models.CASCADE) \u0418\u043c\u043f\u043e\u0440\u0442\u044b >>> from practice.models import * >>> import datetime >>> from django.db.models import Min, Max, Count \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 >>> car1 = Car.objects.create(num='num1', mark='mark1', model='model1', color='black') >>> car2 = Car.objects.create(num='num2', mark='mark1', model='model2', color='black') >>> car3 = Car.objects.create(num='num3', mark='mark1', model='model3', color='black') >>> car4 = Car.objects.create(num='num4', mark='mark2', model='model1', color='black') >>> car5 = Car.objects.create(num='num5', mark='mark2', model='model2', color='black') >>> car6 = Car.objects.create(num='num6', mark='mark2', model='model3', color='black') >>> owner1 = Owner.objects.create(name='name1', surname='surname1', birthday=datetime.date.today()) >>> owner2 = Owner.objects.create(name='name2', surname='surname2', birthday=datetime.date.today()) >>> owner3 = Owner.objects.create(name='name3', surname='surname3', birthday=datetime.date.today()) >>> owner4 = Owner.objects.create(name='name4', surname='surname4', birthday=datetime.date.today()) >>> owner5 = Owner.objects.create(name='name5', surname='surname5', birthday=datetime.date.today()) >>> owner6 = Owner.objects.create(name='name6', surname='surname6', birthday=datetime.date.today()) >>>license1 = License.objects.create(name='licence1', owner=owner1, license_type='type1', date_given=datetime.date.today()) >>>license2 = License.objects.create(name='licence2', owner=owner2, license_type='type1', date_given=datetime.date.today()) >>>license3 = License.objects.create(name='licence3', owner=owner3, license_type='type1', date_given=datetime.date.today()) >>>license4 = License.objects.create(name='licence4', owner=owner4, license_type='type2', date_given=datetime.date.today()) >>>license5 = License.objects.create(name='licence5', owner=owner5, license_type='type2', date_given=datetime.date.today()) >>>car_owing1 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car1, owner=owner1) >>>car_owing2 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car2, owner=owner2) >>>car_owing3 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car3, owner=owner3) >>>car_owing4 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car4, owner=owner4) >>>car_owing5 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car5, owner=owner5) >>>car_owing6 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car6, owner=owner6) \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Car.objects.filter(mark='mark1') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (7)>, <Car: Car object (8)>, <Car: Car object (9)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Owner.objects.filter(name='name1') <QuerySet [<Owner: Owner object (1)>, <Owner: Owner object (7)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> License.objects.filter(owner_id=7) <QuerySet [<License: License object (1)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Car.objects.filter(color='black') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (4)>, <Car: Car object (5)>, <Car: Car object (6)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2010, month=1, day=1), ... cars__start__lt=datetime.date(year=2011, month=1, day=1)) <QuerySet []> >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2024, month=1, day=1), cars__start__lt=datetime.date(year=2025, month=1, day=1)) <QuerySet [<Owner: Owner object (7)>, <Owner: Owner object (8)>, <Owner: Owner object (9)>, <Owner: Owner object (10)>, <Owner: Owner object (11)>, <Owner: Owner object (12)>]> \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate(date_given=Min('date_given')) {'date_given': datetime.date(2024, 1, 10)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> CarOwning.objects.aggregate(date_given=Max('finish')) {'date_given': datetime.date(2024, 1, 10)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> counts = Owner.objects.annotate(Count(\"cars\")) >>> for count in counts: ... print(count.name, count.cars__count) ... name1 1 name2 1 name3 1 name4 1 name5 1 name6 1 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Car.objects.values(\"mark\").annotate(Count(\"id\")) <QuerySet [{'mark': 'mark1', 'id__count': 6}, {'mark': 'mark2', 'id__count': 6}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> CarOwning.objects.order_by(\"owner__licences__date_given\") <QuerySet [<CarOwning: CarOwning object (1)>, <CarOwning: CarOwning object (2)>, <CarOwning: CarOwning object (3)>, <CarOwning: CarOwning object (4)>, <CarOwning: CarOwning object (5)>, <CarOwning: CarOwning object (6)>, <CarOwning: CarOwning object (12)>, <CarOwning: CarOwning object (7)>, <CarOwning: CarOwning object (8)>, <CarOwning: CarOwning object (9)>, <CarOwning: CarOwning object (10)>, <CarOwning: CarOwning object (11)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"practice_3_1/#31","text":"\u041c\u043e\u0434\u0435\u043b\u0438 from django.db import models class Owner(models.Model): name = models.CharField(max_length=100) surname = models.CharField(max_length=100) birthday = models.DateField() class License(models.Model): name = models.CharField(max_length=100) owner = models.ForeignKey(Owner, related_name='licences', on_delete=models.CASCADE) license_type = models.CharField(max_length=100) date_given = models.DateField() class Car(models.Model): num = models.CharField(max_length=100) mark = models.CharField(max_length=100) model = models.CharField(max_length=100) color = models.CharField(max_length=100) class CarOwning(models.Model): start = models.DateField() finish = models.DateField() car = models.ForeignKey(Car, related_name='owners', on_delete=models.CASCADE) owner = models.ForeignKey(Owner, related_name='cars', on_delete=models.CASCADE) \u0418\u043c\u043f\u043e\u0440\u0442\u044b >>> from practice.models import * >>> import datetime >>> from django.db.models import Min, Max, Count \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 >>> car1 = Car.objects.create(num='num1', mark='mark1', model='model1', color='black') >>> car2 = Car.objects.create(num='num2', mark='mark1', model='model2', color='black') >>> car3 = Car.objects.create(num='num3', mark='mark1', model='model3', color='black') >>> car4 = Car.objects.create(num='num4', mark='mark2', model='model1', color='black') >>> car5 = Car.objects.create(num='num5', mark='mark2', model='model2', color='black') >>> car6 = Car.objects.create(num='num6', mark='mark2', model='model3', color='black') >>> owner1 = Owner.objects.create(name='name1', surname='surname1', birthday=datetime.date.today()) >>> owner2 = Owner.objects.create(name='name2', surname='surname2', birthday=datetime.date.today()) >>> owner3 = Owner.objects.create(name='name3', surname='surname3', birthday=datetime.date.today()) >>> owner4 = Owner.objects.create(name='name4', surname='surname4', birthday=datetime.date.today()) >>> owner5 = Owner.objects.create(name='name5', surname='surname5', birthday=datetime.date.today()) >>> owner6 = Owner.objects.create(name='name6', surname='surname6', birthday=datetime.date.today()) >>>license1 = License.objects.create(name='licence1', owner=owner1, license_type='type1', date_given=datetime.date.today()) >>>license2 = License.objects.create(name='licence2', owner=owner2, license_type='type1', date_given=datetime.date.today()) >>>license3 = License.objects.create(name='licence3', owner=owner3, license_type='type1', date_given=datetime.date.today()) >>>license4 = License.objects.create(name='licence4', owner=owner4, license_type='type2', date_given=datetime.date.today()) >>>license5 = License.objects.create(name='licence5', owner=owner5, license_type='type2', date_given=datetime.date.today()) >>>car_owing1 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car1, owner=owner1) >>>car_owing2 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car2, owner=owner2) >>>car_owing3 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car3, owner=owner3) >>>car_owing4 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car4, owner=owner4) >>>car_owing5 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car5, owner=owner5) >>>car_owing6 = CarOwning.objects.create(start=datetime.date.today(), finish=datetime.date.today(), car=car6, owner=owner6) \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) >>> Car.objects.filter(mark='mark1') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (7)>, <Car: Car object (8)>, <Car: Car object (9)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) >>> Owner.objects.filter(name='name1') <QuerySet [<Owner: Owner object (1)>, <Owner: Owner object (7)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) >>> License.objects.filter(owner_id=7) <QuerySet [<License: License object (1)>]> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) >>> Car.objects.filter(color='black') <QuerySet [<Car: Car object (1)>, <Car: Car object (2)>, <Car: Car object (3)>, <Car: Car object (4)>, <Car: Car object (5)>, <Car: Car object (6)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2010, month=1, day=1), ... cars__start__lt=datetime.date(year=2011, month=1, day=1)) <QuerySet []> >>> Owner.objects.filter(cars__start__gt=datetime.date(year=2024, month=1, day=1), cars__start__lt=datetime.date(year=2025, month=1, day=1)) <QuerySet [<Owner: Owner object (7)>, <Owner: Owner object (8)>, <Owner: Owner object (9)>, <Owner: Owner object (10)>, <Owner: Owner object (11)>, <Owner: Owner object (12)>]> \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> License.objects.aggregate(date_given=Min('date_given')) {'date_given': datetime.date(2024, 1, 10)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 >>> CarOwning.objects.aggregate(date_given=Max('finish')) {'date_given': datetime.date(2024, 1, 10)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f >>> counts = Owner.objects.annotate(Count(\"cars\")) >>> for count in counts: ... print(count.name, count.cars__count) ... name1 1 name2 1 name3 1 name4 1 name5 1 name6 1 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 >>> Car.objects.values(\"mark\").annotate(Count(\"id\")) <QuerySet [{'mark': 'mark1', 'id__count': 6}, {'mark': 'mark2', 'id__count': 6}]> \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f >>> CarOwning.objects.order_by(\"owner__licences__date_given\") <QuerySet [<CarOwning: CarOwning object (1)>, <CarOwning: CarOwning object (2)>, <CarOwning: CarOwning object (3)>, <CarOwning: CarOwning object (4)>, <CarOwning: CarOwning object (5)>, <CarOwning: CarOwning object (6)>, <CarOwning: CarOwning object (12)>, <CarOwning: CarOwning object (7)>, <CarOwning: CarOwning object (8)>, <CarOwning: CarOwning object (9)>, <CarOwning: CarOwning object (10)>, <CarOwning: CarOwning object (11)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"}]}